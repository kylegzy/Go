gray_img = cv2.cvtColor(bgr_img, cv2.COLOR_BGR2GRAY)
plt.imshow(gray_img, cmap = plt.get_cmap('gray'))


### keyboard detection
while True:
    k = cv2.waitKey(0) & 0xFF    # 0xFF? To get the lowest byte.
    if k == 27: break            # Code for the ESC key

cv2.destroyAllWindows()


### openCV and matlibplot RGB switch
b,g,r = cv2.split(bgr_img)       # get b,g,r
rgb_img = cv2.merge([r,g,b])     # switch it to rgb


###binary thresholding 
###http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_thresholding/py_thresholding.html

ret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
ret,thresh2 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)
th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
            cv2.THRESH_BINARY,11,2)


###Hough
lines = cv2.HoughLines(binv,1,np.pi/180,binv.shape[0]/2)
lines=np.float64(lines)
plt.polar(lines[:,:,1],lines[:,:,0],'x')

ix=np.where(np.absolute(f[:,:,1])<np.deg2rad(10))
np.sort(f[:,:,0][ix[0]],axis=0)

n=plotPredictPoint(fig1,p)

cv2.imwrite(folder+"ttt.jpg",n)

d=adaptiveThresh(imgChop(g_fig1,p[8][10],block,'center'))
za=d.copy()
re,cnt,hier=cv2.findContours(za,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)